[{"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\index.js":"1","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\App.js":"2","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\Home.js":"3","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\Company.js":"4","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\Login.js":"5","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\User.js":"6","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\PrivateRoute.js":"7","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Auth.js":"8","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Firebase.js":"9","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Filosofi.js":"10","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Carosello.js":"11","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\ScrollToTop.js":"12","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Footer.js":"13","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Tabelle.js":"14","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Player.js":"15","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\GoogleMap.js":"16","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\GoogleLogin.js":"17","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Item.js":"18","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Reviews.js":"19","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Ranking.js":"20","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Companies.js":"21","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Recensione.js":"22"},{"size":237,"mtime":1611678793042,"results":"23","hashOfConfig":"24"},{"size":719,"mtime":1615470630542,"results":"25","hashOfConfig":"24"},{"size":1193,"mtime":1619544259378,"results":"26","hashOfConfig":"24"},{"size":22104,"mtime":1620745543625,"results":"27","hashOfConfig":"24"},{"size":5743,"mtime":1616752962908,"results":"28","hashOfConfig":"24"},{"size":0,"mtime":1614502604854,"results":"29","hashOfConfig":"24"},{"size":411,"mtime":1616752989131,"results":"30","hashOfConfig":"24"},{"size":624,"mtime":1616752962904,"results":"31","hashOfConfig":"24"},{"size":538,"mtime":1614501797806,"results":"32","hashOfConfig":"24"},{"size":1429,"mtime":1616752762592,"results":"33","hashOfConfig":"24"},{"size":1041,"mtime":1615292085136,"results":"34","hashOfConfig":"24"},{"size":847,"mtime":1616752063797,"results":"35","hashOfConfig":"24"},{"size":1451,"mtime":1620893937125,"results":"36","hashOfConfig":"24"},{"size":1334,"mtime":1615292621138,"results":"37","hashOfConfig":"24"},{"size":611,"mtime":1617285312328,"results":"38","hashOfConfig":"24"},{"size":862,"mtime":1616752667349,"results":"39","hashOfConfig":"24"},{"size":1362,"mtime":1616752960562,"results":"40","hashOfConfig":"24"},{"size":259,"mtime":1611570343510,"results":"41","hashOfConfig":"24"},{"size":5606,"mtime":1620903341118,"results":"42","hashOfConfig":"24"},{"size":14860,"mtime":1620898630974,"results":"43","hashOfConfig":"24"},{"size":2373,"mtime":1619541716097,"results":"44","hashOfConfig":"24"},{"size":15505,"mtime":1620902168580,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ktycue",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\index.js",[],["100","101"],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\App.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\Home.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\Company.js",["102","103","104","105","106"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport './styles/Company.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInstagram } from '@fortawesome/free-brands-svg-icons';\r\nimport { faHeart, faUser, faComment, faTrashAlt, faCalendar } from '@fortawesome/free-regular-svg-icons';\r\nimport firebase from './components/Firebase';\r\nimport { faMailBulk, faSitemap, faHeart as pieno, faPen } from '@fortawesome/free-solid-svg-icons';\r\nimport Footer from './components/Footer';\r\nimport Carousel from 'react-elastic-carousel';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Image, Card, Button, Modal, ProgressBar, Spinner, Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport Player from \"./components/Player\";\r\nimport { Link } from 'react-router-dom';\r\nimport GoogleMap from './components/GoogleMap';\r\n\r\nconst breakPoints = [\r\n    { width: 1, itemsToShow: 1 },\r\n    { width: 550, itemsToShow: 1 },\r\n    { width: 768, itemsToShow: 2, itemsToScroll: 2 },\r\n    { width: 1200, itemsToShow: 3, itemsToScroll: 3 }\r\n];\r\n\r\nexport function Company() {\r\n    const [products, setProducts] = useState([]);\r\n    const [company, setCompany] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [error, setError] = useState([]);\r\n    const [varieta, setVarieta] = useState();\r\n    const [img, setImg] = useState();\r\n    const [totale, setTotale] = useState();\r\n    const [aspetto, setAspetto] = useState();\r\n    const [odore, setOdore] = useState();\r\n    const [fumata, setFumata] = useState();\r\n    const [svapata, setSvapata] = useState();\r\n    const [video, setVideo] = useState();\r\n    const [aroma, setAroma] = useState();\r\n    const [tipo, setTipo] = useState();\r\n    let { id } = useParams();\r\n    const roundTo = require('round-to');\r\n    const [comments, setComments] = useState([]);\r\n    const [commento, setCommento] = useState('');\r\n    const [like, setLike] = useState([]);\r\n    const [likeColor, setLikeColor] = useState('white');\r\n    const [likeForm, setLikeForm] = useState(faHeart);\r\n    const [immagine, setImmagine] = useState(false);\r\n    const handleClose = () => setImmagine(false);\r\n    const handleShow = () => setImmagine(true);\r\n    const [modify, setModify] = useState('');\r\n    const [modifica, setModifica] = useState('');\r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('aziende').doc(id).get().then(response => {\r\n            if (response.data === \"undefined\") setError(\"undefined\");\r\n            else setCompany(response.data());\r\n        });\r\n        firebase.firestore().collection('recensioni').get().then(response => {\r\n            const prodotti = [];\r\n            response.forEach(prodotto => prodotti.push(prodotto.data()));\r\n            setProducts(prodotti);\r\n        });\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    if (loading) return <h1 style={{ color: 'white' }}><Spinner animation=\"grow\" /></h1>\r\n\r\n    if (!error.length === 0) return <h1>Pagina non trovata.</h1>\r\n\r\n    const renderTooltipModal = (props, recensione) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            {recensione === undefined ? null : recensione.map(aroma => toName(aroma))}\r\n        </Tooltip>\r\n    );\r\n\r\n    const mettoLike = () => {\r\n        const date = Date.now().toString();\r\n        firebase.firestore().collection('voti').doc(date).set({\r\n            id: date,\r\n            utente: firebase.auth().currentUser.email,\r\n            varietà: varieta\r\n        })\r\n    };\r\n\r\n    const renderComments = comment => (\r\n        <div className=\"commenti\">\r\n            <div className=\"imput--commenti\"><FontAwesomeIcon color='white' icon={faUser} /> {comment.username}</div>\r\n            <div className=\"imput--commento\"><FontAwesomeIcon color='rgb(194, 194, 194)' icon={faCalendar} /> {comment.data}</div>\r\n            <div className=\"commenti--contenuti\" >\r\n                {modify !== comment.id ? <><FontAwesomeIcon color='white' icon={faComment} /> {comment.commento}</> :\r\n                    <div className='invia-commento'>\r\n                        <input value={modifica} className='input' type='text' onChange={event => setModifica(event.target.value)} />\r\n                        <Button onClick={() => {\r\n                            setModify(null);\r\n                            firebase.firestore().collection('commenti').doc(comment.id).update({ commento: modifica });\r\n                        }}>Invia</Button>\r\n                        <Button variant=\"danger\" onClick={() => setModify(null)}>Annulla</Button>\r\n                    </div>\r\n                }\r\n                {firebase.auth().currentUser != null ? modify !== comment.id ? comment.utente === firebase.auth().currentUser.email ?\r\n                    <div style={{ paddingTop: '1%' }}>\r\n                        <Button style={{ padding: '1%', margin: '1%' }} variant=\"info\" onClick={() => { setModify(comment.id); setModifica(comment.commento) }}><FontAwesomeIcon color='white' icon={faPen} /></Button>\r\n                        <Button style={{ padding: '1%', margin: '1%' }} variant=\"danger\" onClick={() => firebase.firestore().collection('commenti').doc(comment.id).delete()}><FontAwesomeIcon color='white' icon={faTrashAlt} /></Button>\r\n                    </div> : null\r\n                    : null : null}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const Mailto = ({ email, subject = '', body = '', children }) => {\r\n        let params = subject || body ? '?' : '';\r\n        if (subject) params += `subject=${encodeURIComponent(subject)}`;\r\n        if (body) params += `${subject ? '&' : ''}body=${encodeURIComponent(body)}`;\r\n        return <a href={`mailto:${email}${params}`}>{children}</a>;\r\n    };\r\n\r\n    const renderTooltip = (props, recensione) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            {recensione.aromi === undefined ? null : recensione.aromi.map(aroma => toName(aroma))}\r\n        </Tooltip>\r\n    );\r\n\r\n    const toName = aroma => {\r\n        if (aroma === 'citrico') return 'Citrico ';\r\n        if (aroma === 'skunk') return 'Skunk ';\r\n        if (aroma === 'verde') return 'Verde ';\r\n        if (aroma === 'altro') return 'Altro ';\r\n        if (aroma === 'pungente') return 'Pungente ';\r\n        if (aroma === 'agrumi') return 'Agrumi ';\r\n        if (aroma === 'ananas') return 'Ananas ';\r\n        if (aroma === 'bosco') return 'Bosco ';\r\n        if (aroma === 'fresco') return 'Fresco ';\r\n        if (aroma === 'fiori') return 'Fiori ';\r\n        if (aroma === 'legno') return 'Legno ';\r\n        if (aroma === 'frutta') return 'Frutta ';\r\n        if (aroma === 'dolce') return 'Dolce ';\r\n    }\r\n\r\n    return (\r\n        <div className=\"companyBody\">\r\n            <Link to={\"/\"}><p className=\"modal--voti azienda--modal\">Indietro</p></Link>\r\n            <div className=\"company_Body-card\">\r\n                <div className=\"nameCompany col-50 padding-20 tito-title\" >\r\n                    <div className=\"company__img logo-titolo\">\r\n                        <img src={company.logo} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"titolo-posizione col-50\">\r\n                        <h2 className=\"title\">{company.nome} </h2>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <div className=\"\">\r\n                    <div className=\"grid-company\">\r\n                        <div className=\"col-65 col-50s padding-20\">\r\n                            <div className=\"brb description padding-20 tito\">\r\n                                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Maiores, perspiciatis animi commodi assumenda totam nisi iure nulla, aliquam ipsam esse, dolore harum omnis repellat nostrum repellendus eligendi quae doloremque numquam.</p>\r\n                            </div>\r\n                            <br />\r\n                            <br />\r\n                            <div className=\"brb tito\">\r\n                                <div className=\"carusel__company padding-20\">\r\n                                    <Carousel breakPoints={breakPoints}>\r\n                                        {products.filter(value => value.marca === company.nome).map(filteredProduct => (\r\n                                            <Card className=\"box card__reviews-company\" key={filteredProduct.id}\r\n                                                onClick={() => {\r\n                                                    firebase.firestore().collection('voti').where('varietà', '==', filteredProduct.varietà).onSnapshot(fetch => {\r\n                                                        const items = [];\r\n                                                        fetch.forEach(doc => items.push(doc.data()));\r\n                                                        setLike(items);\r\n                                                        if (firebase.auth().currentUser != null)\r\n                                                            items.forEach(data => data.utente === firebase.auth().currentUser.email ? (setLikeColor('red'), setLikeForm(pieno)) : null);\r\n                                                    });\r\n                                                    setTipo(filteredProduct.tipo)\r\n                                                    setVarieta(filteredProduct.varietà);\r\n                                                    setImg(filteredProduct.img);\r\n                                                    setVideo(filteredProduct.video);\r\n                                                    setAroma(filteredProduct.aromi);\r\n                                                    setShow(true);\r\n                                                    setTimeout(() => {\r\n                                                        setFumata(filteredProduct.fumata);\r\n                                                        setAspetto(filteredProduct.aspetto);\r\n                                                        setOdore(filteredProduct.odore);\r\n                                                        setSvapata(filteredProduct.svapata);\r\n                                                        setTotale(filteredProduct.tipo >= 'Hash' ?\r\n                                                            roundTo((filteredProduct.aspetto + filteredProduct.fumata) / 2, 1) :\r\n                                                            roundTo((filteredProduct.aspetto + filteredProduct.fumata + filteredProduct.odore + filteredProduct.svapata) / 4, 1));\r\n                                                    }, 100);\r\n                                                    firebase.firestore().collection('commenti').where('varietà', '==', filteredProduct.varietà).onSnapshot(comment => {\r\n                                                        const items = [];\r\n                                                        comment.forEach(doc => items.push(doc.data()));\r\n                                                        setComments(items.reverse());\r\n                                                    });\r\n                                                }}>\r\n                                                <Card.Img className='card_img' variant=\"top\" src={filteredProduct.img} />\r\n                                                <Card.Body>\r\n                                                    <Card.Title>{filteredProduct.varietà}</Card.Title>\r\n                                                    <Card.Text>\r\n                                                        <OverlayTrigger placement=\"right\" delay={{ show: 250, hide: 400 }} overlay={renderTooltip(1, filteredProduct)}>\r\n                                                            <Button variant=\"link\" style={{ boxShadow: 'none' }}>\r\n                                                                {filteredProduct.aromi === undefined ? null :\r\n                                                                    filteredProduct.aromi.map(aroma => <img src={process.env.PUBLIC_URL + \"/images/gusti/\" + aroma + \".png\"} width=\"45\" height=\"45\" />)}\r\n                                                            </Button>\r\n                                                        </OverlayTrigger>\r\n                                                        <br />Voto: {filteredProduct.tipo >= 'Hash' ?\r\n                                                            roundTo((filteredProduct.aspetto + filteredProduct.fumata) / 2, 1) :\r\n                                                            roundTo((filteredProduct.aspetto + filteredProduct.fumata + filteredProduct.odore + filteredProduct.svapata) / 4, 1)}\r\n                                                    </Card.Text>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        ))}\r\n                                    </Carousel>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"odina-company col-30 col-50s padding-20 tito\">\r\n                            <div className=\"contattiCompany\">\r\n                                <h2 className=\"subTitle white\">Contatti</h2>\r\n                                <div className=\"row--company\">\r\n                                    <div className='social-container'>\r\n                                        <Mailto email={company.email}>\r\n                                            <a className=\"email facebook social inriga\" >\r\n                                                <FontAwesomeIcon icon={faMailBulk} size='2x' />\r\n                                                <p>filosofinerba@gmail.com</p>\r\n                                            </a>\r\n                                        </Mailto>\r\n                                    </div>\r\n                                    <div className=' social-container'>\r\n                                        <a className=\"instagram social inriga\" href={company.instagram}>\r\n                                            <FontAwesomeIcon icon={faInstagram} size='2x' />\r\n                                            <p>filosofi_in_erba</p>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className='social-container'>\r\n                                        <a className=\"facebook social inriga\" href={company.sito}>\r\n                                            <FontAwesomeIcon icon={faSitemap} size='2x' />\r\n                                            <p>filosiinerba.it</p>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"evntuale__maps col-50s\">\r\n                                <GoogleMap />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <Modal size='lg' show={show} centered onHide={() => {\r\n                    setShow(false);\r\n                    setOdore(0);\r\n                    setFumata(0);\r\n                    setSvapata(0);\r\n                    setTotale(0);\r\n                    setAspetto(0);\r\n                    setLikeColor('white');\r\n                    setLikeForm(faHeart);\r\n                }} >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title className=\"azienda--modal\" bsPrefix='modal_title'>{varieta}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{ color: '#2c2c32' }}>\r\n                        <p className=\"modal--voti modal--nome--varieta\">\r\n                            <OverlayTrigger placement=\"right\" delay={{ show: 250, hide: 400 }} overlay={renderTooltipModal(1, aroma)}>\r\n                                <Button variant=\"link\" style={{ boxShadow: 'none' }}>\r\n                                    {aroma === undefined ? null :\r\n                                        aroma.map(aroma => <img src={process.env.PUBLIC_URL + \"/images/gusti/\" + aroma + \".png\"} width=\"45\" height=\"45\" />)}\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </p>\r\n                        <div className='row--modal row--modal_736'>\r\n                            <div className='col col-50s'>\r\n                                <img onClick={handleShow} className='img' src={img} />\r\n                            </div>\r\n                            <div className='col col-50s'>\r\n                                <div className='riga'>\r\n                                    <p className=\"voti\">Aspetto <ProgressBar className='progress' animated min={0} max={10} now={aspetto} label={aspetto} /></p>\r\n                                    {tipo !== 'Hash' ? <>\r\n                                        <p className=\"voti\">Odore<ProgressBar className='progress' animated min={0} max={10} now={odore} label={odore} /></p>\r\n                                        <p className=\"voti\">Svapata<ProgressBar className='progress' animated min={0} max={10} now={svapata} label={svapata} /></p>\r\n                                    </> : null}\r\n                                    <p className=\"voti\">Fumata<ProgressBar className='progress' animated min={0} max={10} now={fumata} label={fumata} /></p>\r\n                                    <p className=\"voti\">Totale<ProgressBar className='progress' animated min={0} max={10} now={totale} label={totale} /></p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"per--like\">\r\n                            {firebase.auth().currentUser === null ? <Link to='/login'><FontAwesomeIcon color='white' icon={faHeart} size='2x' /></Link> :\r\n                                <FontAwesomeIcon color={likeColor} icon={likeForm} size='2x' onClick={() => {\r\n                                    var fallo = true;\r\n                                    if (like.length === 0) {\r\n                                        fallo = false;\r\n                                        setLikeColor('red');\r\n                                        setLikeForm(pieno);\r\n                                        mettoLike();\r\n                                    }\r\n                                    else like.forEach(data => {\r\n                                        if (data.utente === firebase.auth().currentUser.email) {\r\n                                            fallo = false;\r\n                                            setLikeColor('white');\r\n                                            setLikeForm(faHeart);\r\n                                            return firebase.firestore().collection('voti').doc(data.id).delete();\r\n                                        }\r\n                                    })\r\n                                    if (fallo) {\r\n                                        setLikeColor('red');\r\n                                        setLikeForm(pieno);\r\n                                        mettoLike();\r\n                                    }\r\n                                }} />\r\n                            }\r\n                            <div style={{ color: 'white' }}>\r\n                                {like.length}\r\n                            </div>\r\n                        </div>\r\n                        <div className='player'>\r\n                            <Player videoId={video} />\r\n                        </div>\r\n                        <hr className='visibleSeparator' />\r\n                        {firebase.auth().currentUser == null ? <div className=\"per--commenti\">Accedi per commentare</div> :\r\n                            <div className=\"per-commentare\">\r\n                                <input value={commento} className='input-commento' type='text' placeholder='Commenta' onChange={event => setCommento(event.target.value)} />\r\n                                <Button className=\"invia-commento\" disabled={commento === '' ? true : false} onClick={() => {\r\n                                    const date = Date.now().toString();\r\n                                    let today = new Date();\r\n                                    firebase.firestore().collection('commenti').doc(date).set({\r\n                                        utente: firebase.auth().currentUser.email,\r\n                                        username: firebase.auth().currentUser.displayName,\r\n                                        commento: commento,\r\n                                        varietà: varieta,\r\n                                        id: date,\r\n                                        data: today.getDate() + \"/\" + parseInt(today.getMonth() + 1) + \"/\" + today.getFullYear()\r\n                                    }).then(() => console.log(\"Commento pubblicato!\")).catch(error => console.error(\"Errore: \", error));\r\n                                    setCommento('');\r\n                                }}>Invia</Button>\r\n                            </div>}\r\n                        {comments.map(data => renderComments(data))}\r\n                    </Modal.Body>\r\n                    <Modal.Footer style={{ justifyContent: 'center' }}>\r\n                        <Button href='https://www.amazon.it/ref=nav_logo' variant=\"primary\">Acquista</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <Modal size='xl' show={immagine} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title style={{ color: 'white' }}>{varieta}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Image style={{ borderBottomRightRadius: 30, borderBottomLeftRadius: 30 }} src={img} fluid />\r\n                </Modal>\r\n            </div>\r\n            <br />\r\n            <Footer />\r\n        </div>\r\n    );\r\n}","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\Login.js",["107","108"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport firebase from './components/Firebase';\r\nimport { AuthContext } from \"./components/Auth.js\";\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/registrazione.css';\r\nimport foto1 from './img/foto1.jpg';\r\nimport foto2 from './img/foto2.jpg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport GoogleLogin from \"./components/GoogleLogin\";\r\n\r\nconst Login = ({ history }) => {\r\n    const [password, setPassword] = useState('password');\r\n    const handleLogin = useCallback(\r\n        async event => {\r\n            event.preventDefault();\r\n            const { email, password } = event.target.elements;\r\n            try {\r\n                await firebase.auth().signInWithEmailAndPassword(email.value, password.value);\r\n                history.push(\"/\");\r\n            } catch (error) {\r\n                alert(error);\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const handleSignUp = useCallback(async event => {\r\n        event.preventDefault();\r\n        const { email, password, username } = event.target.elements;\r\n        try {\r\n            await firebase.auth().createUserWithEmailAndPassword(email.value, password.value);\r\n            await firebase.auth().currentUser.updateProfile({ displayName: username.value });\r\n            history.push(\"/\");\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }, [history]);\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) return <Redirect to=\"/\" />;\r\n\r\n    function toggleform() {\r\n        var section = document.querySelector('section');\r\n        var container = document.querySelector('.container');\r\n        container.classList.toggle('active');\r\n        section.classList.toggle('active');\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"user signinBx\">\r\n                    <div className=\"imgBx\"><img src={foto1} alt=\"\" /></div>\r\n                    <div className=\"formBx\">\r\n                        <Form onSubmit={handleLogin}>\r\n                            <h2>Accedi</h2>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control name=\"email\" type=\"email\" placeholder=\"Inserisci l'email\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicPassword\">\r\n                                <Form.Control name=\"password\" type={password} placeholder=\"Password\" />\r\n                                {password === 'text' ?\r\n                                    <FontAwesomeIcon icon={faEyeSlash} onClick={() => setPassword('password')} /> :\r\n                                    <FontAwesomeIcon icon={faEye} onClick={() => setPassword('text')} />\r\n                                }\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\">Accedi</Button>\r\n                            <p className=\"signup\">non hai un account? <a href=\"#\" onClick={toggleform} >Iscriviti</a></p>\r\n                            <hr className='visibleSeparator' />\r\n                            <GoogleLogin />\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"user signupBx\">\r\n                    <div className=\"formBx\">\r\n                        <Form onSubmit={handleSignUp}>\r\n                            <h2>Crea un'account</h2>\r\n                            <Form.Group controlId=\"formBasicUsername\">\r\n                                <Form.Control name=\"username\" type=\"username\" placeholder=\"Nome utente\" />\r\n                                <Form.Control.Feedback type=\"valid\">Va bene!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Non va bene</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                                <Form.Control.Feedback type=\"valid\">Va bene!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Non va bene</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicPassword\">\r\n                                <Form.Control name=\"password\" type={password} placeholder=\"Password\" />\r\n                                <Form.Control.Feedback type=\"valid\">Va bene!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Non va bene</Form.Control.Feedback>\r\n                                {password === 'text' ?\r\n                                    <FontAwesomeIcon icon={faEyeSlash} onClick={() => setPassword('password')} /> :\r\n                                    <FontAwesomeIcon icon={faEye} onClick={() => setPassword('text')} />\r\n                                }\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\">Registrati</Button>\r\n                            <p class=\"signup\">hai un account?<a href=\"#\" onClick={toggleform}>Accedi</a></p>\r\n                        </Form>\r\n                    </div>\r\n                    <div className=\"imgBx\"><img src={foto2} alt=\"\" /></div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default withRouter(Login);","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\User.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\PrivateRoute.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Auth.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Firebase.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Filosofi.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Carosello.js",["109","110","111"],"import React from 'react';\r\nimport Item from \"./Item\";\r\nimport Carousel from 'react-elastic-carousel';\r\n\r\nexport default function Carosello() {\r\n    const breakPoints = [\r\n        { width: 1, itemsToShow: 1 },\r\n        { width: 550, itemsToShow: 1 },\r\n        { width: 768, itemsToShow: 2, itemsToScroll: 2 },\r\n        { width: 1200, itemsToShow: 3, itemsToScroll: 3 }\r\n    ];\r\n\r\n    return (\r\n        <Carousel breakPoints={breakPoints}>\r\n            <Item onClick={() => window.open('https://www.amazon.it/ref=nav_logo', '_blank').focus()}><img src='https://www.italiamac.it/wp-content/uploads/2018/09/italiamac-mojave-night.jpg' /></Item>\r\n            <Item><img src='https://i.pinimg.com/736x/47/2b/b7/472bb77fe6637ee9f03fa2deb0c73f59.jpg' /></Item>\r\n            <Item><img src='https://www.checcobai.com/wp-content/uploads/2020/03/OS-X-10-11-768x480.jpg' /></Item>\r\n            <Item>4</Item>\r\n            <Item>5</Item>\r\n            <Item>6</Item>\r\n            <Item>7</Item>\r\n            <Item>8</Item>\r\n        </Carousel>\r\n    );\r\n}","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\ScrollToTop.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Footer.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Tabelle.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Player.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\GoogleMap.js",["112","113","114"],"import React, { useEffect, useState } from 'react';\r\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\r\n//import { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\r\n\r\nexport function MapContainer() {\r\n  const [lat, setLat] = useState(42.1);\r\n  const [lng, setLng] = useState(42.1);\r\n  // const address = async () => await geocodeByAddress('Toronto, ON, Canada').then(results => getLatLng(results[0])).then(({ lat, lng }) => { setLat(lat); setLng(lng); }).catch(error => console.error('Error', error));\r\n  // useEffect(address, []);\r\n\r\n  return (\r\n    <Map google={window.google} initialCenter={{ lat: lat, lng: lng }} center={{ lat: lat, lng: lng }}  >\r\n      <Marker position={{ lat: lat, lng: lng }} />\r\n    </Map>\r\n  )\r\n}\r\n\r\nexport default GoogleApiWrapper({ apiKey: ('AIzaSyDwzGSsCkzeL0hqgqv_OOLAkhYfOlzvL9k') })(MapContainer)","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\GoogleLogin.js",["115","116","117","118","119","120"],"import React, { Component } from 'react';\r\nimport firebase from './Firebase';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport default class GoogleLogin extends Component {\r\n    onSubmit = () => {\r\n        var provider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(provider).then((result) => {\r\n            /** @type {firebase.auth.OAuthCredential} */\r\n            var credential = result.credential;\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            var token = credential.accessToken;\r\n            // The signed-in user info.\r\n            var user = result.user;\r\n            // ...\r\n        }).catch((error) => {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n        });\r\n    }\r\n\r\n    render() { return (<Button variant=\"danger\" onClick={this.onSubmit}><FontAwesomeIcon icon={faGoogle} /> Accedi con Google</Button>) }\r\n}","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Item.js",[],"C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Reviews.js",["121"],"import React, { useEffect, useState } from 'react';\r\nimport firebase from './Firebase';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Form, Button, Dropdown, Spinner } from 'react-bootstrap';\r\nimport Recensione from './Recensione';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowAltCircleDown } from '@fortawesome/free-regular-svg-icons';\r\n\r\nexport default function Reviews() {\r\n  const [allReviews, setAllReviews] = useState([]);\r\n  const [review, setReview] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [lastDoc, setLastDoc] = useState('');\r\n  const [isEmpty, setIsEmpty] = useState(false);\r\n  const [search, setSearch] = useState('');\r\n  const [filtro, setFiltro] = useState('Varietà');\r\n  const ref = firebase.firestore().collection('recensioni');\r\n  const [tipo, setTipo] = useState('');\r\n  const fetchMore = () => tipo === '' ?\r\n    ref.startAfter(lastDoc).limit(12).onSnapshot(querySnapshot => updateState(querySnapshot)) :\r\n    ref.startAfter(lastDoc).where('tipo', '==', tipo).limit(12).onSnapshot(querySnapshot => updateState(querySnapshot));\r\n\r\n  const updateState = querySnapshot => {\r\n    if (querySnapshot.size !== 0) {\r\n      const items = [];\r\n      const lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n      querySnapshot.forEach(doc => items.push(doc.data()));\r\n      setReview(list => [...list, ...items]);\r\n      setLastDoc(lastDoc);\r\n    } else setIsEmpty(true);\r\n    setLoading(false);\r\n  }\r\n\r\n  const fetchReviews = fetch => {\r\n    const items = [];\r\n    fetch.forEach(doc => items.push(doc.data()));\r\n    setAllReviews(items);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    ref.limit(12).onSnapshot(querySnapshot => updateState(querySnapshot));\r\n    ref.onSnapshot(onSnapshot => fetchReviews(onSnapshot));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading && <h2 style={{ color: 'white' }}><Spinner animation=\"grow\" /></h2>}\r\n      <div className='row'>\r\n        <div className=\"due-input\">\r\n          <input className='input' type='text' placeholder='Cerca...' onChange={event => setSearch(event.target.value)} />\r\n          <Dropdown className='input-varieta'>\r\n            <Dropdown.Toggle id=\"dropdown-basic\" variant='secondary' style={{ backgroundColor: \"#2c2c32\", boxShadow: 'none' }}>{filtro}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => setFiltro('Azienda')} style={{ color: \"white\" }}>Azienda</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <Dropdown.Item onClick={() => setFiltro('Varietà')}>Varietà</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n        <Form.Group className=\"tre--pallini col-50s\">\r\n          <Row className=\"tre--pallini_contenuto\" sm={10}>\r\n            <Form.Check\r\n              onClick={() => {\r\n                setReview([]);\r\n                setLastDoc('');\r\n                setIsEmpty(false);\r\n                setTipo('');\r\n                ref.limit(12).onSnapshot(querySnapshot => {\r\n                  const items = [];\r\n                  const lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n                  querySnapshot.forEach(doc => items.push(doc.data()));\r\n                  setReview(items);\r\n                  setLastDoc(lastDoc);\r\n                });\r\n              }}\r\n              inline\r\n              type=\"radio\"\r\n              label=\"Tutto\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios1\"\r\n              defaultChecked\r\n            />\r\n            <Form.Check\r\n              onClick={() => {\r\n                setReview([]);\r\n                setLastDoc('');\r\n                setIsEmpty(false);\r\n                setTipo('Erba');\r\n                ref.where('tipo', '==', 'Erba').limit(12).onSnapshot(querySnapshot => {\r\n                  const items = [];\r\n                  const lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n                  querySnapshot.forEach(doc => items.push(doc.data()));\r\n                  setReview(items);\r\n                  setLastDoc(lastDoc);\r\n                });\r\n              }}\r\n              inline\r\n              type=\"radio\"\r\n              label=\"Erba\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios2\"\r\n            />\r\n            <Form.Check\r\n              onClick={() => {\r\n                setReview([]);\r\n                setLastDoc('');\r\n                setIsEmpty(false);\r\n                setTipo('Hash');\r\n                ref.where('tipo', '==', 'Hash').limit(12).onSnapshot(querySnapshot => {\r\n                  const items = [];\r\n                  const lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n                  querySnapshot.forEach(doc => items.push(doc.data()));\r\n                  setReview(items);\r\n                  setLastDoc(lastDoc);\r\n                });\r\n              }}\r\n              inline\r\n              type=\"radio\"\r\n              label=\"Hash\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios3\"\r\n            />\r\n          </Row>\r\n        </Form.Group>\r\n      </div>\r\n      <Recensione tipo={tipo} review={review} allReviews={allReviews} search={search} filtro={filtro} />\r\n      {!loading && !isEmpty && search === '' && <Button className=\"btn__fullcard\" style={{ backgroundColor: \"#2c2c32\" }} variant=\"secondary\" onClick={fetchMore}>Di più <FontAwesomeIcon color='white' icon={faArrowAltCircleDown} /></Button>}\r\n      {isEmpty && <h1 style={{ color: 'white' }}>Fine</h1>}\r\n    </>\r\n  );\r\n}","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Ranking.js",["122","123","124"],"import React, { useEffect, useState } from 'react';\r\nimport firebase from './Firebase';\r\nimport Player from \"./Player\";\r\nimport { Link } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Image, Button, Modal, Table, ProgressBar, Tooltip, OverlayTrigger, Spinner } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart, faUser, faComment, faTrashAlt, faCalendar } from '@fortawesome/free-regular-svg-icons';\r\nimport { faHeart as pieno, faPen } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Ranking() {\r\n    const [review, setReview] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [varieta, setVarieta] = useState();\r\n    const [marca, setMarca] = useState();\r\n    const [img, setImg] = useState();\r\n    const [totale, setTotale] = useState(0);\r\n    const [aspetto, setAspetto] = useState(0);\r\n    const [odore, setOdore] = useState(0);\r\n    const [fumata, setFumata] = useState(0);\r\n    const [svapata, setSvapata] = useState(0);\r\n    const [show, setShow] = useState(false);\r\n    const [video, setVideo] = useState();\r\n    const [aroma, setAroma] = useState();\r\n    const [immagine, setImmagine] = useState(false);\r\n    const [like, setLike] = useState([]);\r\n    const [likeColor, setLikeColor] = useState('white');\r\n    const [likeForm, setLikeForm] = useState(faHeart);\r\n    const [modify, setModify] = useState('');\r\n    const [modifica, setModifica] = useState('');\r\n    const handleClose = () => setImmagine(false);\r\n    const handleShow = () => setImmagine(true);\r\n    const [comments, setComments] = useState([]);\r\n    const [commento, setCommento] = useState('');\r\n    const [tipo, setTipo] = useState()\r\n    var position = 1;\r\n    const ref = firebase.firestore().collection('recensioni');\r\n    const roundTo = require('round-to');\r\n\r\n    const updateState = querySnapshot => {\r\n        const items = [];\r\n        querySnapshot.forEach(doc => items.push(doc.data()));\r\n        setReview(items.sort(function compareNumbers(a, b) {\r\n            if (tipo >= 'Hash')\r\n                return (b.aspetto + b.fumata) / 2 - (a.aspetto + a.fumata) / 2;\r\n            else\r\n                return (b.aspetto + b.fumata + b.odore + b.svapata) / 4 - (a.aspetto + a.fumata + a.odore + a.svapata) / 4;\r\n        }));\r\n    }\r\n\r\n    const renderComments = comment => <div className=\"commenti\">\r\n        <div className=\"imput--commenti\"><FontAwesomeIcon color='white' icon={faUser} /> {comment.username}</div>\r\n        <div className=\"imput--commento\"><FontAwesomeIcon color='rgb(194, 194, 194)' icon={faCalendar} /> {comment.data}</div>\r\n        <div className=\"commenti--contenuti\" >\r\n            {modify !== comment.id ? <><FontAwesomeIcon color='white' icon={faComment} /> {comment.commento}</> :\r\n                <div className='invia-commento'>\r\n                    <input value={modifica} className='input' type='text' onChange={event => setModifica(event.target.value)} />\r\n                    <Button onClick={() => {\r\n                        setModify(null);\r\n                        firebase.firestore().collection('commenti').doc(comment.id).update({ commento: modifica });\r\n                    }}>Invia</Button>\r\n                    <Button variant=\"danger\" onClick={() => setModify(null)}>Annulla</Button>\r\n                </div>\r\n            }\r\n            {firebase.auth().currentUser != null ? modify !== comment.id ? comment.utente === firebase.auth().currentUser.email ?\r\n                <div style={{ paddingTop: '1%' }}>\r\n                    <Button style={{ padding: '1%', margin: '1%' }} variant=\"info\" onClick={() => { setModify(comment.id); setModifica(comment.commento) }}><FontAwesomeIcon color='white' icon={faPen} /></Button>\r\n                    <Button style={{ padding: '1%', margin: '1%' }} variant=\"danger\" onClick={() => firebase.firestore().collection('commenti').doc(comment.id).delete()}><FontAwesomeIcon color='white' icon={faTrashAlt} /></Button>\r\n                </div> : null\r\n                : null : null}\r\n        </div>\r\n    </div>\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        ref.onSnapshot(querySnapshot => updateState(querySnapshot));\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const toName = aroma => {\r\n        if (aroma === 'citrico') return 'Citrico ';\r\n        if (aroma === 'skunk') return 'Skunk ';\r\n        if (aroma === 'verde') return 'Verde ';\r\n        if (aroma === 'altro') return 'Altro ';\r\n        if (aroma === 'pungente') return 'Pungente ';\r\n        if (aroma === 'agrumi') return 'Agrumi ';\r\n        if (aroma === 'ananas') return 'Ananas ';\r\n        if (aroma === 'bosco') return 'Bosco ';\r\n        if (aroma === 'fresco') return 'Fresco ';\r\n        if (aroma === 'fiori') return 'Fiori ';\r\n        if (aroma === 'legno') return 'Legno ';\r\n        if (aroma === 'frutta') return 'Frutta ';\r\n        if (aroma === 'dolce') return 'Dolce ';\r\n    }\r\n\r\n    const renderReviews = recensione => (position <= 15 ?\r\n        <tbody key={recensione.id} onClick={() => {\r\n            setVarieta(recensione.varietà);\r\n            setMarca(recensione.marca);\r\n            setImg(recensione.img);\r\n            setVideo(recensione.video);\r\n            setAroma(recensione.aromi);\r\n            setTipo(recensione.tipo);\r\n            setShow(true);\r\n            firebase.firestore().collection('voti').where('varietà', '==', recensione.varietà).onSnapshot(fetch => {\r\n                const items = [];\r\n                fetch.forEach(doc => items.push(doc.data()));\r\n                setLike(items);\r\n                if (firebase.auth().currentUser != null)\r\n                    items.forEach(data => data.utente === firebase.auth().currentUser.email ? (setLikeColor('red'), setLikeForm(pieno)) : null);\r\n            });\r\n            setTimeout(() => {\r\n                setAspetto(recensione.aspetto);\r\n                setFumata(recensione.fumata);\r\n                setOdore(recensione.odore);\r\n                setSvapata(recensione.svapata);\r\n                setTotale(recensione.tipo >= 'Hash' ? roundTo((recensione.aspetto + recensione.fumata) / 2, 1) :\r\n                    roundTo((recensione.aspetto + recensione.fumata + recensione.odore + recensione.svapata) / 4, 1));\r\n            }, 100);\r\n            firebase.firestore().collection('commenti').where('varietà', '==', recensione.varietà).onSnapshot(comment => {\r\n                const items = [];\r\n                comment.forEach(doc => items.push(doc.data()));\r\n                setComments(items.reverse());\r\n            });\r\n        }}>\r\n            <tr>\r\n                <td>{position++}</td>\r\n                <td>{recensione.varietà}</td>\r\n                <td>{recensione.marca}</td>\r\n                <td>{recensione.tipo >= 'Hash' ?\r\n                    roundTo((recensione.aspetto + recensione.fumata) / 2, 1) :\r\n                    roundTo((recensione.aspetto + recensione.fumata + recensione.odore + recensione.svapata) / 4, 1)}</td>\r\n            </tr>\r\n        </tbody> : null);\r\n\r\n    const renderTooltipModal = (props, recensione) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            {recensione === undefined ? null : recensione.map(aroma => toName(aroma))}\r\n        </Tooltip>\r\n    );\r\n\r\n    const mettoLike = () => {\r\n        const date = Date.now().toString();\r\n        firebase.firestore().collection('voti').doc(date).set({\r\n            id: date,\r\n            utente: firebase.auth().currentUser.email,\r\n            varietà: varieta\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {loading && <h2 style={{ color: 'white' }}><Spinner animation=\"grow\" /></h2>}\r\n            <div className=\"ranking\">\r\n                <h1 style={{ color: 'white' }}>Migliori 2020</h1>\r\n                <Table striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>2020</th>\r\n                            <th>Varietà</th>\r\n                            <th>Azienda</th>\r\n                            <th>Voto</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {review.map(data => renderReviews(data))}\r\n                </Table>\r\n            </div>\r\n            <Modal size='lg' show={show} centered onHide={() => {\r\n                setShow(false);\r\n                setOdore(0);\r\n                setFumata(0);\r\n                setSvapata(0);\r\n                setTotale(0);\r\n                setAspetto(0);\r\n                setLikeColor('white');\r\n                setLikeForm(faHeart);\r\n            }} >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title bsPrefix='modal_title'><Link to={\"/company/\" + marca}><p className=\"azienda--modal\">{marca}</p></Link></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{ color: '#2c2c32' }}>\r\n                    <p className=\"modal--voti modal--nome--varieta\">{varieta}\r\n                        <OverlayTrigger placement=\"right\" delay={{ show: 250, hide: 400 }} overlay={renderTooltipModal(1, aroma)}>\r\n                            <Button variant=\"link\" style={{ boxShadow: 'none' }}>\r\n                                {aroma === undefined ? null :\r\n                                    aroma.map(aroma => <img src={process.env.PUBLIC_URL + \"/images/gusti/\" + aroma + \".png\"} width=\"45\" height=\"45\" />)}\r\n                            </Button>\r\n                        </OverlayTrigger>\r\n                    </p>\r\n                    <div className='row--modal row--modal_736'>\r\n                        <div className='col col-50s modal--img_736'>\r\n                            <img onClick={handleShow} className='img' src={img} />\r\n                        </div>\r\n                        <div className='col col-50s modal--voti_736'>\r\n                            <div className='riga'>\r\n                                <p className=\"voti\">Aspetto <ProgressBar className='progress' animated min={0} max={10} now={aspetto} label={aspetto} /></p>\r\n                                {tipo !== 'Hash' ? <>\r\n                                    <p className=\"voti\">Odore<ProgressBar className='progress' animated min={0} max={10} now={odore} label={odore} /></p>\r\n                                    <p className=\"voti\">Svapata<ProgressBar className='progress' animated min={0} max={10} now={svapata} label={svapata} /></p>\r\n                                </> : null}\r\n                                <p className=\"voti\">Fumata<ProgressBar className='progress' animated min={0} max={10} now={fumata} label={fumata} /></p>\r\n                                <p className=\"voti\">Totale<ProgressBar className='progress' animated min={0} max={10} now={totale} label={totale} /></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"per--like\">\r\n                        {firebase.auth().currentUser === null ? <Link to='/login'><FontAwesomeIcon color='white' icon={likeForm} size='2x' /></Link> :\r\n                            <FontAwesomeIcon color={likeColor} icon={likeForm} size='2x' onClick={() => {\r\n                                var fallo = true;\r\n                                if (like.length === 0) {\r\n                                    fallo = false;\r\n                                    setLikeColor('red');\r\n                                    setLikeForm(pieno);\r\n                                    mettoLike();\r\n                                }\r\n                                else like.forEach(data => {\r\n                                    if (data.utente === firebase.auth().currentUser.email) {\r\n                                        fallo = false;\r\n                                        setLikeColor('white');\r\n                                        setLikeForm(faHeart);\r\n                                        return firebase.firestore().collection('voti').doc(data.id).delete();\r\n                                    }\r\n                                })\r\n                                if (fallo) {\r\n                                    setLikeColor('red');\r\n                                    setLikeForm(pieno);\r\n                                    mettoLike();\r\n                                }\r\n                            }} />\r\n                        }\r\n                        <div style={{ color: 'white' }}>\r\n                            {like.length}\r\n                        </div>\r\n                    </div>\r\n                    <div className='player'>\r\n                        <Player videoId={video} />\r\n                    </div>\r\n                    <hr className='visibleSeparator' />\r\n                    {firebase.auth().currentUser == null ? <div className=\"per--commenti\">Accedi per commentare</div> :\r\n                        <div className=\"per-commentare\">\r\n                            <input value={commento} className='input-commento' type='text' placeholder='Commenta' onChange={event => setCommento(event.target.value)} />\r\n                            <Button className=\"invia-commento\" disabled={commento === '' ? true : false} onClick={() => {\r\n                                const date = Date.now().toString();\r\n                                let today = new Date();\r\n                                firebase.firestore().collection('commenti').doc(date).set({\r\n                                    utente: firebase.auth().currentUser.email,\r\n                                    username: firebase.auth().currentUser.displayName,\r\n                                    commento: commento,\r\n                                    varietà: varieta,\r\n                                    id: date,\r\n                                    data: today.getDate() + \"/\" + parseInt(today.getMonth() + 1) + \"/\" + today.getFullYear()\r\n                                }).then(() => console.log(\"Commento pubblicato!\")).catch(error => console.error(\"Errore: \", error));\r\n                                setCommento('');\r\n                            }}>Invia</Button>\r\n                        </div>}\r\n                    {comments.map(data => renderComments(data))}\r\n                </Modal.Body>\r\n                <Modal.Footer style={{ justifyContent: 'center' }}>\r\n                    <Button href='https://www.amazon.it/ref=nav_logo' variant=\"primary\">Acquista</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal size='xl' show={immagine} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title style={{ color: 'white' }}>{varieta}</Modal.Title>\r\n                </Modal.Header>\r\n                <Image style={{ borderBottomRightRadius: 30, borderBottomLeftRadius: 30 }} src={img} fluid />\r\n            </Modal>\r\n        </>\r\n    );\r\n}","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Companies.js",["125"],"import React, { useEffect, useState } from 'react'\r\nimport firebase from './Firebase';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Card, Button, Spinner } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowAltCircleDown } from '@fortawesome/free-regular-svg-icons';\r\n\r\nexport default function Companies() {\r\n    const [company, setCompany] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [lastDoc, setLastDoc] = useState();\r\n    const [isEmpty, setIsEmpty] = useState(false);\r\n    const ref = firebase.firestore().collection('aziende');\r\n    const fetchMore = () => ref.startAfter(lastDoc).limit(12).onSnapshot(querySnapshot => updateState(querySnapshot));\r\n\r\n    const updateState = querySnapshot => {\r\n        if (querySnapshot.size !== 0) {\r\n            const items = [];\r\n            const lastDoc = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n            querySnapshot.forEach(doc => items.push(doc.data()));\r\n            setCompany(list => [...list, ...items]);\r\n            setLastDoc(lastDoc);\r\n        } else setIsEmpty(true);\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        ref.limit(12).onSnapshot(querySnapshot => updateState(querySnapshot));\r\n    }, []);\r\n\r\n    const renderCompanies = azienda => (\r\n        <Link to={\"/company/\" + azienda.nome}>\r\n            <Card className=\"box card__reviews\" key={azienda.id} onClick={() => { }}>\r\n                <Card.Img className='company_img' variant=\"top\" src={azienda.logo} />\r\n                <Card.Body>\r\n                    <Card.Title>{azienda.nome}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        </Link>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {loading && <h2 style={{ color: 'white' }}><Spinner animation=\"grow\" /></h2>}\r\n            <div className=\"conteinerRecensioni\">\r\n                {company.map(data => renderCompanies(data))}\r\n            </div>\r\n            {!loading && !isEmpty && <Button className=\"btn__fullcard\" variant=\"secondary\" style={{ backgroundColor: \"#2c2c32\" }} onClick={fetchMore}>Di più <FontAwesomeIcon color='white' icon={faArrowAltCircleDown} /></Button>}\r\n            {isEmpty && <h1 style={{ color: 'white' }}>Fine</h1>}\r\n        </>\r\n    );\r\n}","C:\\Users\\Pietr\\OneDrive\\Desktop\\per il fra\\36\\filosofi-in-erba\\src\\components\\Recensione.js",["126","127","128"],"import React, { useState } from 'react';\r\nimport firebase from './Firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart, faUser, faComment, faTrashAlt, faCalendar } from '@fortawesome/free-regular-svg-icons';\r\nimport { faHeart as pieno, faPen } from '@fortawesome/free-solid-svg-icons';\r\nimport Player from \"./Player\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, Card, Button, Modal, ProgressBar, Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default function Recensione({ tipo, search, review, allReviews, filtro }) {\r\n    const handleClose = () => setImmagine(false);\r\n    const handleShow = () => setImmagine(true);\r\n    const [modify, setModify] = useState('');\r\n    const [modifica, setModifica] = useState('');\r\n    const [like, setLike] = useState([]);\r\n    const [likeColor, setLikeColor] = useState('white');\r\n    const [likeForm, setLikeForm] = useState(faHeart);\r\n    const [immagine, setImmagine] = useState(false);\r\n    const [varieta, setVarieta] = useState();\r\n    const [marca, setMarca] = useState();\r\n    const [img, setImg] = useState();\r\n    const [totale, setTotale] = useState(0);\r\n    const [aspetto, setAspetto] = useState(0);\r\n    const [odore, setOdore] = useState(0);\r\n    const [fumata, setFumata] = useState(0);\r\n    const [svapata, setSvapata] = useState(0);\r\n    const [show, setShow] = useState(false);\r\n    const [video, setVideo] = useState();\r\n    const [aroma, setAroma] = useState();\r\n    const roundTo = require('round-to');\r\n    const [comments, setComments] = useState([]);\r\n    const [commento, setCommento] = useState('');\r\n\r\n    const toName = aroma => {\r\n        if (aroma === 'citrico') return 'Citrico ';\r\n        if (aroma === 'skunk') return 'Skunk ';\r\n        if (aroma === 'verde') return 'Verde ';\r\n        if (aroma === 'altro') return 'Altro ';\r\n        if (aroma === 'pungente') return 'Pungente ';\r\n        if (aroma === 'agrumi') return 'Agrumi ';\r\n        if (aroma === 'ananas') return 'Ananas ';\r\n        if (aroma === 'bosco') return 'Bosco ';\r\n        if (aroma === 'fresco') return 'Fresco ';\r\n        if (aroma === 'fiori') return 'Fiori ';\r\n        if (aroma === 'legno') return 'Legno ';\r\n        if (aroma === 'frutta') return 'Frutta ';\r\n        if (aroma === 'dolce') return 'Dolce ';\r\n    }\r\n\r\n    const renderTooltip = (props, recensione) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            {recensione.aromi === undefined ? null : recensione.aromi.map(aroma => toName(aroma))}\r\n        </Tooltip>\r\n    );\r\n\r\n    const renderTooltipModal = (props, recensione) => (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            {recensione === undefined ? null : recensione.map(aroma => toName(aroma))}\r\n        </Tooltip>\r\n    );\r\n\r\n    const words = val => {\r\n        if (filtro === 'Varietà') {\r\n            if (val.varietà.toLowerCase().includes(search.toLowerCase())) return val;\r\n        } else if (val.marca.toLowerCase().includes(search.toLowerCase())) return val;\r\n    }\r\n\r\n    function filterHash(item) {\r\n        if (item.tipo === 'Hash') return true;\r\n        return false;\r\n    }\r\n\r\n    function filterErba(item) {\r\n        if (item.tipo === 'Erba') return true;\r\n        return false;\r\n    }\r\n\r\n    const mettoLike = () => {\r\n        const date = Date.now().toString();\r\n        firebase.firestore().collection('voti').doc(date).set({\r\n            id: date,\r\n            utente: firebase.auth().currentUser.email,\r\n            varietà: varieta\r\n        })\r\n    };\r\n\r\n    const renderComments = comment => <div className=\"commenti\">\r\n        <div className=\"imput--commenti\"><FontAwesomeIcon color='white' icon={faUser} /> {comment.username}</div>\r\n        <div className=\"imput--commento\"><FontAwesomeIcon color='rgb(194, 194, 194)' icon={faCalendar} /> {comment.data}</div>\r\n        <div className=\"commenti--contenuti\" >\r\n            {modify !== comment.id ? <><FontAwesomeIcon color='white' icon={faComment} /> {comment.commento}</> :\r\n                <div className='invia-commento'>\r\n                    <input value={modifica} className='input' type='text' onChange={event => setModifica(event.target.value)} />\r\n                    <Button onClick={() => {\r\n                        setModify(null);\r\n                        firebase.firestore().collection('commenti').doc(comment.id).update({ commento: modifica });\r\n                    }}>Invia</Button>\r\n                    <Button variant=\"danger\" onClick={() => setModify(null)}>Annulla</Button>\r\n                </div>\r\n            }\r\n            {firebase.auth().currentUser != null ? modify !== comment.id ? comment.utente === firebase.auth().currentUser.email ?\r\n                <div style={{ paddingTop: '1%' }}>\r\n                    <Button style={{ padding: '1%', margin: '1%' }} variant=\"info\" onClick={() => { setModify(comment.id); setModifica(comment.commento) }}><FontAwesomeIcon color='white' icon={faPen} /></Button>\r\n                    <Button style={{ padding: '1%', margin: '1%' }} variant=\"danger\" onClick={() => firebase.firestore().collection('commenti').doc(comment.id).delete()}><FontAwesomeIcon color='white' icon={faTrashAlt} /></Button>\r\n                </div> : null\r\n                : null : null}\r\n        </div>\r\n    </div>\r\n\r\n    const renderReviews = recensione => (\r\n        <Card className=\"box card__reviews\" key={recensione.id}\r\n            onClick={() => {\r\n                firebase.firestore().collection('voti').where('varietà', '==', recensione.varietà).onSnapshot(fetch => {\r\n                    const items = [];\r\n                    fetch.forEach(doc => items.push(doc.data()));\r\n                    setLike(items);\r\n                    if (firebase.auth().currentUser != null)\r\n                        items.forEach(data => data.utente === firebase.auth().currentUser.email ? (setLikeColor('red'), setLikeForm(pieno)) : null);\r\n                });\r\n                setVarieta(recensione.varietà);\r\n                setMarca(recensione.marca);\r\n                setImg(recensione.img);\r\n                setVideo(recensione.video);\r\n                setAroma(recensione.aromi);\r\n                setShow(true);\r\n                setTimeout(() => {\r\n                    setAspetto(recensione.aspetto);\r\n                    setFumata(recensione.fumata);\r\n                    setOdore(recensione.odore);\r\n                    setSvapata(recensione.svapata);\r\n                    setTotale(recensione.tipo === 'Hash' ? roundTo((recensione.aspetto + recensione.fumata) / 2, 1) :\r\n                        roundTo((recensione.aspetto + recensione.fumata + recensione.odore + recensione.svapata) / 4, 1));\r\n                }, 100);\r\n                firebase.firestore().collection('commenti').where('varietà', '==', recensione.varietà).onSnapshot(comment => {\r\n                    const items = [];\r\n                    comment.forEach(doc => items.push(doc.data()));\r\n                    setComments(items.reverse());\r\n                });\r\n            }}>\r\n            <Card.Img className='card_img' variant=\"top\" src={recensione.img} />\r\n            <Card.Body>\r\n                <Card.Title>{recensione.varietà}</Card.Title>\r\n                <Card.Text>{recensione.marca}<br />\r\n                    <OverlayTrigger placement=\"right\" delay={{ show: 250, hide: 400 }} overlay={renderTooltip(1, recensione)}>\r\n                        <Button variant=\"link\" style={{ boxShadow: 'none' }}>\r\n                            {recensione.aromi === undefined ? null :\r\n                                recensione.aromi.map(aroma => <img src={process.env.PUBLIC_URL + \"/images/gusti/\" + aroma + \".png\"} width=\"45\" height=\"45\" />)}\r\n                        </Button>\r\n                    </OverlayTrigger>\r\n                    <br />Voto: {recensione.tipo === 'Hash' ?\r\n                        roundTo((recensione.aspetto + recensione.fumata) / 2, 1) :\r\n                        roundTo((recensione.aspetto + recensione.fumata + recensione.odore + recensione.svapata) / 4, 1)}\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"conteinerRecensioni\">\r\n                {search === '' ? (tipo === '' ? review.map(data => renderReviews(data)) : (\r\n                    tipo === 'Hash' ? review.filter(filterHash).map(data => renderReviews(data))\r\n                        : review.filter(filterErba).map(data => renderReviews(data)))) :\r\n                    (tipo === '' ? allReviews.filter(val => words(val)).map(data => renderReviews(data)) : tipo === 'Hash' ?\r\n                        allReviews.filter(filterHash).filter(val => words(val)).map(data => renderReviews(data)) :\r\n                        allReviews.filter(filterErba).filter(val => words(val)).map(data => renderReviews(data)))}\r\n            </div>\r\n            <Modal size='lg' show={show} centered onHide={() => {\r\n                setShow(false);\r\n                setOdore(0);\r\n                setFumata(0);\r\n                setSvapata(0);\r\n                setTotale(0);\r\n                setAspetto(0);\r\n                setLikeColor('white');\r\n                setLikeForm(faHeart);\r\n            }} >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title bsPrefix='modal_title'><Link to={\"/company/\" + marca}><p className=\"azienda--modal\">{marca}</p></Link></Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body style={{ color: '#2c2c32' }}>\r\n                    <p className=\"modal--voti modal--nome--varieta\">{varieta}\r\n                        <OverlayTrigger placement=\"right\" delay={{ show: 250, hide: 400 }} overlay={renderTooltipModal(1, aroma)}>\r\n                            <Button variant=\"link\" style={{ boxShadow: 'none' }}>\r\n                                {aroma === undefined ? null :\r\n                                    aroma.map(aroma => <img src={process.env.PUBLIC_URL + \"/images/gusti/\" + aroma + \".png\"} width=\"45\" height=\"45\" />)}\r\n                            </Button>\r\n                        </OverlayTrigger>\r\n                    </p>\r\n                    <div className='row--modal row--modal_736'>\r\n                        <div className='col col-50s modal--img_736'>\r\n                            <img onClick={handleShow} className='img' src={img} />\r\n                        </div>\r\n                        <div className='col col-50s modal--voti_736'>\r\n                            <div className='riga'>\r\n                                <p className=\"voti\">Aspetto <ProgressBar className='progress' animated min={0} max={10} now={aspetto} label={aspetto} /></p>\r\n                                {tipo !== 'Hash' ? <>\r\n                                    <p className=\"voti\">Odore<ProgressBar className='progress' animated min={0} max={10} now={odore} label={odore} /></p>\r\n                                    <p className=\"voti\">Svapata<ProgressBar className='progress' animated min={0} max={10} now={svapata} label={svapata} /></p>\r\n                                </> : null}\r\n                                <p className=\"voti\">Fumata<ProgressBar className='progress' animated min={0} max={10} now={fumata} label={fumata} /></p>\r\n                                <p className=\"voti\">Totale<ProgressBar className='progress' animated min={0} max={10} now={totale} label={totale} /></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"per--like\">\r\n                        {firebase.auth().currentUser === null ? <Link to='/login'><FontAwesomeIcon color='white' icon={likeForm} size='2x' /></Link> :\r\n                            <FontAwesomeIcon color={likeColor} icon={likeForm} size='2x' onClick={() => {\r\n                                var fallo = true;\r\n                                if (like.length === 0) {\r\n                                    fallo = false;\r\n                                    setLikeColor('red');\r\n                                    setLikeForm(pieno);\r\n                                    mettoLike();\r\n                                }\r\n                                else like.forEach(data => {\r\n                                    if (data.utente === firebase.auth().currentUser.email) {\r\n                                        fallo = false;\r\n                                        setLikeColor('white');\r\n                                        setLikeForm(faHeart);\r\n                                        return firebase.firestore().collection('voti').doc(data.id).delete();\r\n                                    }\r\n                                })\r\n                                if (fallo) {\r\n                                    setLikeColor('red');\r\n                                    setLikeForm(pieno);\r\n                                    mettoLike();\r\n                                }\r\n                            }} />\r\n                        }\r\n                        <div style={{ color: 'white' }}>\r\n                            {like.length}\r\n                        </div>\r\n                    </div>\r\n                    <div className='player'>\r\n                        <Player videoId={video} />\r\n                    </div>\r\n                    <hr className='visibleSeparator' />\r\n                    {firebase.auth().currentUser == null ? <div className=\"per--commenti\">Accedi per commentare</div> :\r\n                        <div className=\"per-commentare\">\r\n                            <input value={commento} className='input-commento' type='text' placeholder='Commenta' onChange={event => setCommento(event.target.value)} />\r\n                            <Button className=\"invia-commento\" disabled={commento === '' ? true : false} onClick={() => {\r\n                                const date = Date.now().toString();\r\n                                let today = new Date();\r\n                                firebase.firestore().collection('commenti').doc(date).set({\r\n                                    utente: firebase.auth().currentUser.email,\r\n                                    username: firebase.auth().currentUser.displayName,\r\n                                    commento: commento,\r\n                                    varietà: varieta,\r\n                                    id: date,\r\n                                    data: today.getDate() + \"/\" + parseInt(today.getMonth() + 1) + \"/\" + today.getFullYear()\r\n                                }).then(() => console.log(\"Commento pubblicato!\")).catch(error => console.error(\"Errore: \", error));\r\n                                setCommento('');\r\n                            }}>Invia</Button>\r\n                        </div>}\r\n                    {comments.map(data => renderComments(data))}\r\n                </Modal.Body>\r\n                <Modal.Footer style={{ justifyContent: 'center' }}>\r\n                    <Button href='https://www.amazon.it/ref=nav_logo' variant=\"primary\">Acquista</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal size='xl' show={immagine} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title style={{ color: 'white' }}>{varieta}</Modal.Title>\r\n                </Modal.Header>\r\n                <Image style={{ borderBottomRightRadius: 30, borderBottomLeftRadius: 30 }} src={img} fluid />\r\n            </Modal>\r\n        </>\r\n    );\r\n}",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":64,"column":8,"nodeType":"135","endLine":64,"endColumn":10,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":201,"column":104,"nodeType":"139","endLine":201,"endColumn":199},{"ruleId":"140","severity":1,"message":"141","line":221,"column":45,"nodeType":"139","endLine":221,"endColumn":90},{"ruleId":"137","severity":1,"message":"138","line":266,"column":60,"nodeType":"139","endLine":266,"endColumn":155},{"ruleId":"137","severity":1,"message":"138","line":272,"column":33,"nodeType":"139","endLine":272,"endColumn":87},{"ruleId":"140","severity":1,"message":"142","line":72,"column":71,"nodeType":"139","endLine":72,"endColumn":105},{"ruleId":"140","severity":1,"message":"142","line":102,"column":62,"nodeType":"139","endLine":102,"endColumn":95},{"ruleId":"137","severity":1,"message":"138","line":15,"column":103,"nodeType":"139","endLine":15,"endColumn":195},{"ruleId":"137","severity":1,"message":"138","line":16,"column":19,"nodeType":"139","endLine":16,"endColumn":104},{"ruleId":"137","severity":1,"message":"138","line":17,"column":19,"nodeType":"139","endLine":17,"endColumn":108},{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":26},{"ruleId":"143","severity":1,"message":"147","line":6,"column":15,"nodeType":"145","messageId":"146","endLine":6,"endColumn":21},{"ruleId":"143","severity":1,"message":"148","line":7,"column":15,"nodeType":"145","messageId":"146","endLine":7,"endColumn":21},{"ruleId":"143","severity":1,"message":"149","line":14,"column":17,"nodeType":"145","messageId":"146","endLine":14,"endColumn":22},{"ruleId":"143","severity":1,"message":"150","line":16,"column":17,"nodeType":"145","messageId":"146","endLine":16,"endColumn":21},{"ruleId":"143","severity":1,"message":"151","line":20,"column":17,"nodeType":"145","messageId":"146","endLine":20,"endColumn":26},{"ruleId":"143","severity":1,"message":"152","line":21,"column":17,"nodeType":"145","messageId":"146","endLine":21,"endColumn":29},{"ruleId":"143","severity":1,"message":"153","line":23,"column":17,"nodeType":"145","messageId":"146","endLine":23,"endColumn":22},{"ruleId":"143","severity":1,"message":"154","line":25,"column":17,"nodeType":"145","messageId":"146","endLine":25,"endColumn":27},{"ruleId":"133","severity":1,"message":"155","line":44,"column":6,"nodeType":"135","endLine":44,"endColumn":8,"suggestions":"156"},{"ruleId":"133","severity":1,"message":"157","line":78,"column":8,"nodeType":"135","endLine":78,"endColumn":10,"suggestions":"158"},{"ruleId":"137","severity":1,"message":"138","line":186,"column":56,"nodeType":"139","endLine":186,"endColumn":151},{"ruleId":"137","severity":1,"message":"138","line":192,"column":29,"nodeType":"139","endLine":192,"endColumn":83},{"ruleId":"133","severity":1,"message":"155","line":31,"column":8,"nodeType":"135","endLine":31,"endColumn":10,"suggestions":"159"},{"ruleId":"137","severity":1,"message":"138","line":148,"column":63,"nodeType":"139","endLine":148,"endColumn":158},{"ruleId":"137","severity":1,"message":"138","line":187,"column":56,"nodeType":"139","endLine":187,"endColumn":151},{"ruleId":"137","severity":1,"message":"138","line":193,"column":29,"nodeType":"139","endLine":193,"endColumn":83},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["162"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setLat' is assigned a value but never used.","'setLng' is assigned a value but never used.","'token' is assigned a value but never used.","'user' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ref'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'ref' and 'updateState'. Either include them or remove the dependency array.",["164"],["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"168","fix":"172"},"Update the dependencies array to be: [id]",{"range":"173","text":"174"},"Update the dependencies array to be: [ref]",{"range":"175","text":"176"},"Update the dependencies array to be: [ref, updateState]",{"range":"177","text":"178"},{"range":"179","text":"176"},[2926,2928],"[id]",[1844,1846],"[ref]",[4269,4271],"[ref, updateState]",[1363,1365]]